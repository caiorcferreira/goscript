// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=mocks/mock_routine.go -package=mocks Routine
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pipeline "github.com/caiorcferreira/goscript/internal/pipeline"
	gomock "go.uber.org/mock/gomock"
)

// MockPipe is a mock of Pipe interface.
type MockPipe struct {
	ctrl     *gomock.Controller
	recorder *MockPipeMockRecorder
	isgomock struct{}
}

// MockPipeMockRecorder is the mock recorder for MockPipe.
type MockPipeMockRecorder struct {
	mock *MockPipe
}

// NewMockPipe creates a new mock instance.
func NewMockPipe(ctrl *gomock.Controller) *MockPipe {
	mock := &MockPipe{ctrl: ctrl}
	mock.recorder = &MockPipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipe) EXPECT() *MockPipeMockRecorder {
	return m.recorder
}

// Chain mocks base method.
func (m *MockPipe) Chain(p pipeline.Pipe) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Chain", p)
}

// Chain indicates an expected call of Chain.
func (mr *MockPipeMockRecorder) Chain(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chain", reflect.TypeOf((*MockPipe)(nil).Chain), p)
}

// Close mocks base method.
func (m *MockPipe) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPipeMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPipe)(nil).Close))
}

// Done mocks base method.
func (m *MockPipe) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockPipeMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockPipe)(nil).Done))
}

// In mocks base method.
func (m *MockPipe) In() chan pipeline.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "In")
	ret0, _ := ret[0].(chan pipeline.Msg)
	return ret0
}

// In indicates an expected call of In.
func (mr *MockPipeMockRecorder) In() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "In", reflect.TypeOf((*MockPipe)(nil).In))
}

// Out mocks base method.
func (m *MockPipe) Out() chan pipeline.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Out")
	ret0, _ := ret[0].(chan pipeline.Msg)
	return ret0
}

// Out indicates an expected call of Out.
func (mr *MockPipeMockRecorder) Out() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Out", reflect.TypeOf((*MockPipe)(nil).Out))
}

// MockRoutine is a mock of Routine interface.
type MockRoutine struct {
	ctrl     *gomock.Controller
	recorder *MockRoutineMockRecorder
	isgomock struct{}
}

// MockRoutineMockRecorder is the mock recorder for MockRoutine.
type MockRoutineMockRecorder struct {
	mock *MockRoutine
}

// NewMockRoutine creates a new mock instance.
func NewMockRoutine(ctrl *gomock.Controller) *MockRoutine {
	mock := &MockRoutine{ctrl: ctrl}
	mock.recorder = &MockRoutineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutine) EXPECT() *MockRoutineMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockRoutine) Start(ctx context.Context, pipe pipeline.Pipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, pipe)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRoutineMockRecorder) Start(ctx, pipe any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRoutine)(nil).Start), ctx, pipe)
}
